//**************************************************************************************************************************************************************************
//********************************************** Jeux de Lumière 6 LED 12 LED - Partie 37b - Carte Nano (com49) ************************************************************
//**************************************************************************************************************************************************************************
// Auteur : Serge Ducatez - 01/2022
// https://www.youtube.com/channel/UCyGEFYW18IZKpe4uPgp9b8g/videos
// https://www.facebook.com/serge.ducatez.7/photos_albums
//**************************************************************************************************************************************************************************
// Configurez l'affichage de l'IDE à 150%.
//**************************************************************************************************************************************************************************
// Bouton poussoir "BrocheBPModePlus" pour incrémenter le mode courant.
// Bouton poussoir "BrocheBPModeMoins" pour décrémenter le mode courant.
// Bouton poussoir BrocheBPModeAuto" pour activer ou désactiver le mode automatique d'affichages.
// Affichage du mode courant d'affichage sur un écran OLED 1.3" (128x64) SH1106.
// Affichage du mode manuel ou automatique sur l'écran OLED.
// Utilisation de la librairie "U8x8lib.h".
//**************************************************************************************************************************************************************************
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Paramètres modifiables
//**************************************************************************************************************************************************************************
#include "PinChangeInterrupt.h"                                                                                                 // Librairie pour la gestion des interruptions de changement de broche
#include <Wire.h>                                                                                                               // Librairie pour la gestion de la communication I2C avec l'afficheur OLED 1.3" (128x64) SH1106
#include <U8x8lib.h>                                                                                                            // Librairie pour la gestion de l'afficheur OLED 1.3" (128x64) SH1106
#include <avr/pgmspace.h>                                                                                                       // Librairie pour la gestion de la mémoire flash

#define BrocheBuzzer                A0                                                                                          // Broche du buzzer 5v
#define BrocheLED_D2                 2                                                                                          // Broche de la LED D2  (PD2)
#define BrocheLED_D3                 3                                                                                          // Broche de la LED D3  (PD3)
#define BrocheLED_D4                 4                                                                                          // Broche de la LED D4  (PD4)
#define BrocheLED_D5                 5                                                                                          // Broche de la LED D5  (PD5)
#define BrocheLED_D6                 6                                                                                          // Broche de la LED D6  (PD6)
#define BrocheLED_D7                 7                                                                                          // Broche de la LED D7  (PD7)
#define BrocheLED_D8                 8                                                                                          // Broche de la LED D8  (PB0)
#define BrocheLED_D9                 9                                                                                          // Broche de la LED D9  (PB1)
#define BrocheLED_D10               10                                                                                          // Broche de la LED D10 (PB2)
#define BrocheLED_D11               11                                                                                          // Broche de la LED D11 (PB3)
#define BrocheLED_D12               12                                                                                          // Broche de la LED D12 (PB4)
#define BrocheLED_D13               13                                                                                          // Broche de la LED D13 (PB5)
#define BrocheReglagePotentiometre  A6                                                                                          // Broche de l'entrée analogique (A6) pour le réglage de la fréquence ou du rapport cyclique par le potentiomètre
#define BrocheBPModePlus            A1                                                                                          // Broche du bouton poussoir "BPModePlus"
#define BrocheBPModeMoins           A2                                                                                          // Broche du bouton poussoir "BPModeMoins"
#define BrocheBPModeAuto            A3                                                                                          // Broche du bouton poussoir "ModeAuto"

volatile int ModeCourant = 0;                                                                                                   // Mode courant
volatile int DernierModeCourant = -1;                                                                                           // Dernier mode courant
volatile const int NombreModesMax = 26; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de modes maximum

volatile bool SortieModeCourant = false;                                                                                        // Indicateur de sortie du mode courant

volatile bool ModeAuto = false;                                                                                                 // Indicateur du mode automatique
volatile long compteurAffichageModeCourant = 0;                                                                                 // Compteur d'affichages du mode courant en mode automatique
const long NombreAffichageModeCourant = 3;                                                                                      // Nombre d'affichages du mode courant en mode automatique
volatile long MultipleNombreAffichageModeCourant = 1;                                                                           // Multiple du nombre d'affichages du mode courant en mode automatique
bool AffichageModeManuel = true;                                                                                                // Indicateur d'affichage du mode manuel sur l'écran OLED
bool AffichageModeAuto = false;                                                                                                 // Indicateur d'affichage du mode auto sur l'écran OLED

volatile const unsigned long DureeAntiRebond = 5ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Durée de l'anti-rebonds des boutons poussoirs "BPModePlus" et "BPModeMoins" en ms

int PointeurTableauBrochesLED;                                                                                                  // Pointeur des tableaux des broches de 6 LED
const int TableauBrochesLED_D2D7 [] = {2, 3, 4, 5, 6, 7}; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau des broches des 6 LED de (D2 à D7)
const int TableauBrochesLED_D8D13 [] = {8, 9, 10, 11, 12, 13}; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau des broches des 6 LED de (D8 à D13)
int PointeurTableauBroches12LED;                                                                                                // Pointeur du tableau des broches 12 LED
int PointeurTableauBroches12LEDTemp;                                                                                            // Pointeur de fin temporaire du tableau des broches 12 LED
const int TableauBroches12LED [] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau des broches des 12 LED

unsigned long DureeHIGH_LOW;                                                                                                    // Temporisation de la LED activée ou désactivée

byte PORTD_TEMP = 0b00000000;                                                                                                   // PORTD temporaire
byte PORTB_TEMP = 0b00000000;                                                                                                   // PORTB temporaire

const byte NombreLED = 12; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de LED
int SequenceCouranteLED = 0;                                                                                                    // Séquence courante des LED affichées

bool buffer_TableauSequencesLED [12];                                                                                           // Tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
bool bufferInverse_TableauSequencesLED [12];                                                                                    // Tableau contenant les lignes inversées des tableaux des séquences d'affichage des LED
int pt_buffer_TableauSequencesLED;                                                                                              // Pointeur du tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
bool buffer1_TableauSequencesLED [12];                                                                                          // Tableau buffer 1 contenant les lignes des tableaux des séquences d'affichage des LED

const byte NombreSequencesLED1 = 48; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED1 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 1 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 4
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 5
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 6
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 7
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 8
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 9
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 10
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 11
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 12
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 13
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 14
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 15
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 16
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 17
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 18
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 19
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 20
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 21
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 22
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 23
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 24
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 25
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 26
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 27
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 28
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 29
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 30
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 31
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 32
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 33
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 34
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 35
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 36
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 37
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 38
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 39
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 41
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 42
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 43
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 44
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 45
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 46
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 47
};

const byte NombreSequencesLED2 = 32; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED2 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 2 des séquences d'affichage des LED
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 0
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 2
   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, // 4
   0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 5
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, // 6
   0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 7
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, // 8
   0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 9
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 10
   0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 11
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, // 12
   0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 13
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 14
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 15
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 16
   0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 17
   1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 18
   0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, // 19
   1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 20
   0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, // 21
   1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, // 22
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, // 23
   1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, // 24
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, // 25
   1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 26
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, // 27
   1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 28
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 29
   1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 30
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 31
};

const byte NombreSequencesLED3 = 24; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED3 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 3 des séquences d'affichage des LED
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 0
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 1
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 2
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 3
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 4
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 6
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 7
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 8
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 9
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 10
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 11
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 12
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 13
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 14
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 15
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 16
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 17
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 18
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 19
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 20
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 21
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 22
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 23
};

const byte NombreSequencesLED4 = 10; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED4 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 4 des séquences d'affichage des LED
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 0
   0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 1
   0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, // 2
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 3
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 4
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 5
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 6
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 7
   0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, // 8
   0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0  // 9
};

const byte NombreSequencesLED5 = 24; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED5 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 5 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 3
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 4
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 6
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 7
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 8
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 9
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 10
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 11
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 12
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 13
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 14
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 15
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 16
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 17
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 18
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 19
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 20
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 21
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 22
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 23
};

const byte NombreSequencesLED6 = 35; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED6 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 6 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 3
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 4
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
   1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, // 6
   1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, // 7
   1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, // 8
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 9
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 10
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 11
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 12
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 13
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 14
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 15
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 17
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 18
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 19
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 20
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 21
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 22
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 23
   1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, // 24
   1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, // 25
   1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 26
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 27
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 28
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 29
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 30
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 31
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 32
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 33
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 34
};

const byte NombreSequencesLED7 = 28; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED7 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 7 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 0
   0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 1
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 3
   1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 4
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 6
   1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 7
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 8
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 9
   1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 10
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 12
   0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 13
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 14
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 15
   1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 16
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 17
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 18
   1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 19
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 21
   1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 22
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 23
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 24
   0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 25
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 26
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1  // 27
};

const byte NombreSequencesLED8 = 4; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED8 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 8 des séquences d'affichage des LED
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 0
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 2
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 3
};

const byte NombreSequencesLED9 = 66; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED9 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 9 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 4
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
   0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 6
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
   0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 8
   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 9
   0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 10
   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 11
   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 12
   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 13
   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 14
   1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 15
   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 16
   1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 17
   0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 18
   1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 19
   0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 20
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, // 21
   0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 22
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, // 23
   1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, // 24
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, // 25
   1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, // 26
   1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 27
   1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, // 28
   1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 29
   0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 30
   1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 31
   0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 32
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 33
   0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 34
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 35
   0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 36
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 37
   0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 38
   0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 39
   0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 40
   0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 41
   0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 42
   0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 43
   0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 44
   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, // 45
   0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 46
   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, // 47
   0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, // 48
   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, // 49
   0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, // 50
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, // 51
   0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, // 52
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, // 53
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, // 54
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, // 55
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, // 56
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 57
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, // 58
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 59
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 60
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 61
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 62
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 63
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 64
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 65
};

const byte NombreSequencesLED10 = 27; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED10 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 10 des séquences d'affichage des LED (Slide gauche à droite)
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 4
   0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 5
   1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 6
   1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, // 7
   1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 8
   0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, // 9
   0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, // 10
   0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, // 11
   1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, // 12
   1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, // 13
   1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 14
   0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, // 15
   0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, // 16
   0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 17
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, // 18
   0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, // 19
   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 20
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, // 21
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, // 22
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 23
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 24
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 25
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 26
};

const byte NombreSequencesLED11 = 45; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED11 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 11 des séquences d'affichage des LED (Slide gauche à droite)
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1  Décale le 1er
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2  Décale le 2ème
   1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3  Décale le 1er
   0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 4  Décale le 2ème
   0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 5  Décale le 1er
   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 6  Décale le 2ème
   1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 7  Décale le 1er
   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 8  Décale le 2ème
   0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, // 9  Décale le 1er
   1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 10 Décale le 2ème
   1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, // 11 Décale le 1er
   0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 12 Décale le 2ème
   0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, // 13 Décale le 1er
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, // 14 Décale le 2ème
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, // 15 Décale le 1er
   1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, // 16 Décale le 2ème
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, // 17 Décale le 1er
   1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 18 Décale le 2ème
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 19 Décale le 1er
   0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 20 Décale le 2ème
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 21 Décale le 1er
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 22 Décale le 2ème
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 23 Décale le 1er
   0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 24 Décale le 2ème
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 25 Décale le 1er
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 26 Décale le 2ème => 23
   0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 27 Décale le 1er
   0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 28 Décale le 2ème
   0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, // 29 Décale le 1er
   0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 30 Décale le 2ème
   0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 31 Décale le 1er
   0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 32 Décale le 2ème
   0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, // 33 Décale le 1er
   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, // 34 Décale le 2ème
   0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, // 35 Décale le 1er
   0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, // 36 Décale le 2ème
   0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, // 37 Décale le 1er
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, // 38 Décale le 2ème
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, // 39 Décale le 1er
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, // 40 Décale le 2ème
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 41 Décale le 1er
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 42 Décale le 2ème
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 43 Décale le 1er
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1  // 44 Décale le 2ème
};

const byte NombreSequencesLED12 = 21; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED12 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 12 des séquences d'affichage des LED (Slide gauche à droite)
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 4
   0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 5
   0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 7
   0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 8
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 9
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 10
   0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, // 11
   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 12
   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 13
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, // 14
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, // 15
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, // 16
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, // 17
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 18
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 19
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1  // 20
};

const byte NombreSequencesLED13 = 14; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED13 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 13 des séquences d'affichage des LED
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 0
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 1
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 2
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 3
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 4
   0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 5
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 6
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 7
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 8
   0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 9
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 10
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 11
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 12
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0  // 13
};

const byte NombreSequencesLED14 = 16; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED14 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 14 des séquences d'affichage des LED
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 0
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 1
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 2
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 3
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 4
   0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 5
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 6
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 7
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 8
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 9
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 10
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 11
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 12
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 13
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 14
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1  // 15
};

const byte NombreSequencesLED15 = 12; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED15 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 15 des séquences d'affichage des LED
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 0
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 4
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 8
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 9
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 10
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 11
};

const byte NombreSequencesLED16 = 54; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED16 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 16 des séquences d'affichage des LED
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 0
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 4
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
   0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 8
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 9
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, // 10
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 12
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 13
   0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 14
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 15
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, // 16
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 17
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 18
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 19
   0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 20
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 21
   0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, // 22
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 23
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 24
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 25
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 26
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 27
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 28
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 29
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 30
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 31
   0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, // 32
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 33
   0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 34
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 35
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 36
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 37
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, // 38
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 39
   0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 40
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 41
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 42
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 43
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, // 44
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 45
   0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 46
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 47
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 48
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 49
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 50
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 51
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 52
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 53
};

const byte NombreSequencesLED17 = 22; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED17 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 17 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 4
   1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 5
   0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 6
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, // 7
   1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, // 8
   1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 9
   0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 10
   0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, // 11
   0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, // 12
   0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, // 13
   0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 14
   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, // 15
   0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, // 16
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, // 17
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, // 18
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 19
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 20
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 21
};

const byte NombreSequencesLED18 = 15; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED18 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 18 des séquences d'affichage des LED (Slide gauche à droite)
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 4
   0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 5
   1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 6
   1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, // 7
   1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 8
   0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, // 9
   0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, // 10
   0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, // 11
   1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, // 12
   1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, // 13
   1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0  // 14 => 9
};

const byte NombreSequencesLED19 = 36; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED19 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 19 des séquences d'affichage des LED
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 4
   0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 5
   0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 7
   0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 8
   0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, // 9
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 10
   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 11
   0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, // 12
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, // 13
   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 14
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, // 15
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, // 16
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 17
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, // 18
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 19
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, // 20
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, // 21
   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 22
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, // 23
   0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, // 24
   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 25
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 26
   0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, // 27
   0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 28
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 29
   0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 30
   0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 31
   0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 32
   0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 33
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 34
   0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0  // 35
};

const byte NombreSequencesLED20 = 15; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED20 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 20 des séquences d'affichage des LED (Slide droite à gauche)
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 1
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 2
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, // 3
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, // 4
   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 5
   0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, // 6
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, // 7
   0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 8
   0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, // 9
   0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, // 10
   1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 11
   1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, // 12
   1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, // 13
   0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1  // 14 => 9
};

const byte NombreSequencesLED21 = 18; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED21 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 21 des séquences d'affichage des LED (Slide droite à gauche)
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 4
   0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 5
   1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 6
   1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 7
   1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, // 8
   1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, // 9
   0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 10
   0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 11
   1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, // 12
   1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 13
   1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, // 14
   1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, // 15
   0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 16
   0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1  // 17 => 12
};

const byte NombreSequencesLED22 = 15; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED22 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 22 des séquences d'affichage des LED (Slide droite à gauche)
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 4
   1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, // 5
   0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, // 6
   1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, // 7
   0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, // 8
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 9
   1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, // 10
   0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, // 11
   1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, // 12
   0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, // 13
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0  // 14 => 10
};

const byte NombreSequencesLED23 = 23; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED23 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 23 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 4
   1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 5
   0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, // 6
   1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, // 7
   0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, // 8
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, // 9
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, // 10
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 11
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 12
   0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 13
   0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 14
   0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 15
   0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, // 16
   0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, // 17
   0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, // 18
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, // 19
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 20
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 21
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 22
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 23
};

const byte NombreSequencesLED24 = 16; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED24 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 24 des séquences d'affichage des LED
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 0
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 2
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, // 4
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
   0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, // 6
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
   0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, // 8
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 9
   1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, // 10
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 12
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 13
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 14
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 15
};

const byte NombreSequencesLED25 = 15; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED25 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 25 des séquences d'affichage des LED
   1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 0
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, // 2
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 4
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
   0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, // 6
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
   1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, // 8
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 9
   1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, // 10
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
   1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, // 12
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 13
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 14
};

const byte NombreSequencesLED26 = 15; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED26 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 26 des séquences d'affichage des LED
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 0
   0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 1
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 3
   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, // 4
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 5
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 7
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 8
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 9
   0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 10
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 11
   0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, // 12
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 13
   1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1  // 14
};

const byte NombreSequencesLED27 = 24; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED27 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 27 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 4
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 5
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 6
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 7
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 8
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 9
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 10
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 11
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 12
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 13
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 14
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 15
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 16
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 17
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 18
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 19
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 21
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 22
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 23
};

const byte NombreSequencesLED28 = 12; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED28 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 28 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 4
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 5
   
   0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 7
   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 8
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, // 9
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, // 10
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1  // 11
};

const byte NombreSequencesLED29 = 12; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED29 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 29 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, // 4
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 5
   
   1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 7
   1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 8
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, // 9
   1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, // 10
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1  // 11
};

const byte NombreSequencesLED30 = 12; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED30 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 30 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 3
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 4
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
   
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 7
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 8
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 9
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 10
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 11
};

const byte NombreSequencesLED31 = 35; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED31 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 31 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 3
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 4
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
   
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 7
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 8
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 9
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 10
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 11

   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 12
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 13
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 14
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 15
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 16
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 17
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 18
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 19
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 20
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 21
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 22

   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 23
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 24
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 25
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 26
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 27
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 28

   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 29
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 30
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 31
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 32
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 33
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 34
};

const byte NombreSequencesLED32 = 24; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED32 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 32 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 3
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 4
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
   
   1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, // 6
   1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 7
   1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 8
   1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, // 9
   1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, // 10
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 11
   
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 12
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 13
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 14
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 15
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 16
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 17

   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, // 18
   0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, // 19
   0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, // 20
   0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 21
   0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, // 22
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 23
};

const byte NombreSequencesLED33 = 34; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED33 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 33 des séquences d'affichage des LED
   0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 0
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 1
   0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, // 2
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 3
   0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, // 4
   0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 5
   0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, // 6
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 7
   1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 8
   
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 9
   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 10
   0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, // 11
   0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 12
   1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, // 13
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 14
   0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, // 15
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 16
   1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 17
   
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 18
   0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, // 19
   0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 20
   1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, // 21
   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 22
   0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, // 23
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 24

   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 25
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 26
   1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 27
   0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 28
   0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, // 29
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 30
   0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, // 31
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 32
   0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0  // 33
};

const byte NombreSequencesLED34 = 28; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED34 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 34 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, // 1
   1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, // 2
   1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, // 3
   1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 4
   1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, // 5
   0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, // 6
   0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, // 7
   1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, // 8
   1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, // 9
   1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, // 10
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 11
   1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, // 12
   1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, // 13
   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 14
   0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, // 15
   1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, // 16
   1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, // 17
   1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, // 18
   1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, // 19
   1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, // 20
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, // 21
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 22
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 23
   1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, // 24
   1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, // 25
   1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, // 26
   1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1  // 27
};

const byte NombreSequencesLED35 = 49; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED35 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 35 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 1
   1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 2
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 3
   1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, // 4
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 7
   0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 8
   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 9
   0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 10
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 11
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 12
   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 13
   0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, // 14
   0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 15
   1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, // 16
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 17
   0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, // 18
   0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 19
   1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, // 20
   0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, // 21
   0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, // 22
   0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, // 23
   1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, // 24
   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 25
   0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, // 26
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 27
   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 28
   1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 29
   1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, // 30
   0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 31
   0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, // 32
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 33
   0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, // 34
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 35
   0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, // 36
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 37
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 38
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 39
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 40
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 41
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 42
   0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, // 43
   0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, // 44
   0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, // 45
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, // 46
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, // 47
   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1  // 48
};

const byte NombreSequencesLED36 = 72; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED36 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 36 des séquences d'affichage des LED (Slide droite à gauche)
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 4
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 6
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 8
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 9
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 10
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 12
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 13
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 14
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 15
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 16
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 17
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 18
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 19
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 20
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 21
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 22
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 23
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 24
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 25
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 26
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 27
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 28
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 29
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 30
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 31
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 32
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 33
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 34
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 35
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 36
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 37
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 38
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 49
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 40
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 41
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 42
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 43
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 44
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 45
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 46
   1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 47
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 48
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 49
   1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, // 50
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 51
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 52
   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // 53
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 54
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 55
   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 56
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 57
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 58
   1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, // 59
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 60
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 61
   1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 62
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 63
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 64
   1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 65
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 66
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 67
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 68
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 69
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 70
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 71
};

const byte NombreSequencesLED37 = 23; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED37 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 37 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 1
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 2
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 3
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 4
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 5
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 7
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 8
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 9
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 10
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 11
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 12
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 13
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 14
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 15
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 16
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 17
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 18
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 19
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 20
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 21
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1  // 22
};

const byte NombreSequencesLED38 = 23; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED38 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 38 des séquences d'affichage des LED
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 0
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 1
   0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 2
   0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 3
   0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 4
   0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, // 5
   0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, // 6
   0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, // 7
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, // 8
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 9
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 10
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 11
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 12
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 13
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, // 14
   0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, // 15
   0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, // 16
   0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, // 17
   0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 18
   0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 19
   0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 20
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 21
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0  // 22
};

const byte NombreSequencesLED39 = 66; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED39 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 39 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 4
   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, // 5
   0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, // 7
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, // 8
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 9
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 10
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 11
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 12
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 13
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, // 14
   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, // 15
   0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, // 16
   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, // 17
   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 18
   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 19
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 21
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 22
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 23
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 24
   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 25
   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 26
   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, // 27
   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 28
   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 29
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 30
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 31
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 32
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 33
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 34
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 35
   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 36
   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 37
   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, // 38
   0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, // 39
   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, // 40
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, // 41
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 42
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 43
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 44
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 45
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 46
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, // 47
   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, // 48
   0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, // 49
   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, // 50
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, // 51
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 52
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 53
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 54
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 55
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 56
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, // 57
   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, // 58
   0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, // 59
   0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, // 60
   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 61
   0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 62
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 63
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 64
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 65
};

const byte NombreSequencesLED40 = 53; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED40 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 40 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 1
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 2
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 3
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 4
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 5
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 6
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 7
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 8
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 9
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 10
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 11
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 12
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 13
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 14
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 15
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 16
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 17
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 18
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 19
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 20
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 21
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 22
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 23
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 24
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 25
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 26
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 27
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 28
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 29
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 30
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 31
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 32
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 33
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, // 34
   0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 35
   0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, // 36
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 37
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 38
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 39
   0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, // 40
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 41
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 42
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 43
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 44
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 45
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 46
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 47
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 48
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 49
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 50
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 51
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0  // 52
};

const byte NombreSequencesLED41 = 23; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED41 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 41 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 0
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 1
   0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 2
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 3
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 4
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 5
   0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 6
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 7
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 8
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 9
   0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 10
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 11
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 12
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 13
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 14
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 15
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 16
   0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 17
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 18
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 19
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 20
   0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 21
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1  // 22
};

const byte NombreSequencesLED42 = 53; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED42 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 42 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 0
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 1
   1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 2
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 3
   1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, // 4
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 5
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 6
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 7
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, // 8
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 9
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 10
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 11
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 12
   1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 13
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 14
   1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, // 15
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 16
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 17
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 18
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, // 19
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 20
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 21
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 22
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 23
   1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 24
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 25
   1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, // 26
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 27
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 28
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 29
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, // 30
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 31
   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, // 32
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 33
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, // 34
   0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 35
   1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, // 36
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 37
   1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, // 38
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 39
   1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, // 40
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 41
   1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, // 42
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 43
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 44
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 45
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, // 46
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 47
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 48
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 49
   1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, // 50
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 51
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1  // 52
};

const byte NombreSequencesLED43 = 53; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED43 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 43 des séquences d'affichage des LED
   1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, // 0
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 1
   1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 2
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 3
   1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, // 4
   0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, // 5
   1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, // 6
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 7
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, // 8
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 9
   1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, // 10
   1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 11
   0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, // 12
   1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 13
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 14
   1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, // 15
   0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, // 16
   1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, // 17
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 18
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, // 19
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 20
   1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, // 21
   1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 22
   0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, // 23
   1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 24
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 25
   1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, // 26
   0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, // 27
   1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, // 28
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 29
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, // 30
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 31
   1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, // 32
   0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, // 33
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, // 34
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 35
   1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, // 36
   0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, // 37
   1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, // 38
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 39
   1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, // 40
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 41
   1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, // 42
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 43
   1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, // 44
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 45
   1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, // 46
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 47
   1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, // 48
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 49
   1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, // 50
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 51
   1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1  // 52
};

const byte NombreSequencesLED44 = 4; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED44 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 44 des séquences d'affichage des LED
   1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, // 0
   0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, // 1
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 2
   0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1  // 3
};

const byte NombreSequencesLED45 = 46; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED45 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 45 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
   1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
   0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 4
   1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 5
   0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, // 6
   1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, // 7
   0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, // 8
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, // 9
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, // 10
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 11
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 12
   0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 13
   0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 14
   0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 15
   0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, // 16
   0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, // 17
   0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, // 18
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, // 19
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 20
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 21
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 22
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 23
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 24
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 25
   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, // 26
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, // 27
   0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, // 28
   0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, // 29
   0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, // 30
   0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 31
   0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 32
   0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 33
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 34
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 35
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, // 36
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, // 37
   0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, // 38
   1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, // 39
   0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, // 40
   1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, // 41
   0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, // 42
   1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 43
   0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 44
   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 45
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // 46
};

const byte NombreSequencesLED46 = 11; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED46 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 46 des séquences d'affichage des LED
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 0
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 1
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, // 2
   1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, // 3
   0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, // 4
   1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, // 5
   0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 6
   0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 7
   0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, // 8
   0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, // 9
   0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1  // 10
};

const byte NombreSequencesLED47 = 11; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED47 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 47 des séquences d'affichage des LED
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 0
  1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, // 1
  0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 2
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 3
  0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 4
  1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, // 5
  0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, // 6
  1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 7
  0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 8
  1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, // 9
  0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0  // 10
};

const byte NombreSequencesLED48 = 10; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED48 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 48 des séquences d'affichage des LED
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, // 0
  0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, // 1
  0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, // 2
  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, // 3
  0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, // 4
  0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, // 5
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, // 6
  0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 7
  0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, // 8
  1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1  // 9
};

const byte NombreSequencesLED49 = 8; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED49 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 49 des séquences d'affichage des LED
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 0
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 1
  1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, // 2
  1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, // 3
  1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, // 4
  1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, // 5
  0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, // 6
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // 7
};

const byte NombreSequencesLED50 = 34; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED50 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 50 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 0
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 1
   0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 2
   0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, // 3
   0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, // 4
   1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, // 5
   1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, // 6
   0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, // 7
   0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, // 8
   0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 9
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 10
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 11
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 12
   0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 13
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 14
   0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, // 15
   0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, // 16
   1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, // 17
   0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, // 18
   0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, // 19
   0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 20
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 21
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 22
   0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, // 23
   0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, // 24
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 25
   0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, // 26
   0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, // 27
   1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, // 28
   0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, // 29
   0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, // 30
   0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 31
   0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 32
   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1  // 33
};

const byte NombreSequencesLED51 = 34; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED51 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 51 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 0
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 1
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 2
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 3
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 4
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 5
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 6
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 7
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 8
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 9
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 10
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 11
   0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 12
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 13
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 14
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 15
   0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 16
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 17
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 18
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 19
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 20
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 21
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 22
   0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 23
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 24
   0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, // 25
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 26
   0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 27
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 28
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 29
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 30
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 31
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 32
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1  // 33
};

const byte NombreSequencesLED52 = 34; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Nombre de séquences d'affichage des LED
const bool PROGMEM TableauSequencesLED52 [] = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Tableau 52 des séquences d'affichage des LED
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 0
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 1
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 2
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 3
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 4
   1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, // 5
   1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, // 6
   0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, // 7
   0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, // 8
   0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, // 9
   0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, // 10
   1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, // 11
   0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, // 12
   0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, // 13
   0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, // 14
   1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, // 15
   0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, // 16
   1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, // 17
   0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, // 18
   0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, // 19
   0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, // 20
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 21
   1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, // 22
   0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 23
   0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, // 24
   1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, // 25
   0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, // 26
   0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, // 27
   1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, // 28
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 29
   0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, // 30
   0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, // 31
   0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // 32
   1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1  // 33
};

U8X8_SH1106_128X64_NONAME_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE);                                                               // Crée l'objet "u8x8"

//**************************************************************************************************************************************************************************
//**************************************************************************************************************************************************************************
void setup()
{
  //Serial.begin(9600);                                                                                                           // Démarre la voie série pour la communication avec la console
  
  pinMode(BrocheBuzzer, OUTPUT);                                                                                                // Configure les broches en sorties
  for (int BrocheLED = 2; BrocheLED < 14; BrocheLED++)
  {
    pinMode(BrocheLED, OUTPUT);
  }
  
  pinMode(BrocheBPModePlus, INPUT_PULLUP);                                                                                      // Configure les broches en entrées
  pinMode(BrocheBPModeMoins, INPUT_PULLUP);
  pinMode(BrocheBPModeAuto, INPUT_PULLUP);
  
  u8x8.begin();                                                                                                                 // Initialise la librairie de la gestion de l'afficheur OLED 1.3" (128x64) SH1106
  u8x8.setFont(u8x8_font_amstrad_cpc_extended_f);                                                                               // Définit la police de caractères
  u8x8.drawString(0, 0, "MODE D'AFFICHAGE");                                                                                    // Positionne et Affiche le texte
  u8x8.drawString(0, 1, "----------------");                                                                                    // Positionne et Affiche le texte
  u8x8.drawString(0, 6, "----------------");                                                                                    // Positionne et Affiche le texte
  u8x8.drawString(0, 7, "- MODE: MANUEL -");                                                                                    // Positionne et Affiche le texte
  
  FonctionAffichageOLED();                                                                                                      // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
  
  attachPinChangeInterrupt(digitalPinToPinChangeInterrupt(BrocheBPModePlus), InterruptionBPModePlus, FALLING);                  // Attache l'interruption de changement de broche sur la broche "BrocheBPModePlus" et Active la fonction d'événement "InterruptionBPModePlus" sur front descendant
  attachPinChangeInterrupt(digitalPinToPinChangeInterrupt(BrocheBPModeMoins), InterruptionBPModeMoins, FALLING);                // Attache l'interruption de changement de broche sur la broche "BrocheBPModeMoins" et Active la fonction d'événement "InterruptionBPModeMoins" sur front descendant
  attachPinChangeInterrupt(digitalPinToPinChangeInterrupt(BrocheBPModeAuto), InterruptionBPModeAuto, FALLING);                  // Attache l'interruption de changement de broche sur la broche "BrocheBPModeAuto" et Active la fonction d'événement "InterruptionBPModeAuto" sur front descendant
  
  delay(1000);                                                                                                                  // Temporise 1 seconde
  
  Buzzer(50, 0, 1);                                                                                                             // Active le buzzer 50ms

//**************************************************************************************************************************************************************************
//**************************************************************************************************************************************************************************
}

void loop()
{
//**************************************************************************************************************************************************************************
  if (ModeAuto) // ************************************************************************************************************ // Si le mode automatique est activé
  {
    if (!AffichageModeAuto) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si l'indicateur d'affichage du mode auto sur l'écran OLED est désactivé
    {
      u8x8.drawString(0, 7, "-- MODE: AUTO --");                                                                                // Positionne et Affiche le texte
      AffichageModeAuto = true;                                                                                                 // Active l'indicateur d'affichage du mode auto sur l'écran OLED
      AffichageModeManuel = false;                                                                                              // Désactive l'indicateur d'affichage du mode manuel sur l'écran OLED
      compteurAffichageModeCourant = 0;                                                                                         // Réinitialise le compteur d'affichages du mode courant en mode automatique
    }
    
    if (compteurAffichageModeCourant > NombreAffichageModeCourant * MultipleNombreAffichageModeCourant) // ++++++++++++++++++++ // Si le compteur d'affichages du mode courant en mode automatique est supérieur à "3"
    {
      FonctionReinitialisation();                                                                                               // Appelle la fonction de réinitialisation
      
      compteurAffichageModeCourant = 0;                                                                                         // Réinitialise le compteur d'affichages du mode courant en mode automatique
      
      ModeCourant++;                                                                                                            // Incrémente le mode courant
      if (ModeCourant > NombreModesMax) {ModeCourant = 0;} // ----------------------------------------------------------------- // Borne le mode courant
    }
    else // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le compteur d'affichages du mode courant en mode automatique est inférieur ou égal à à "2"
    {
      compteurAffichageModeCourant++;                                                                                           // Incrémente le compteur d'affichages du mode courant en mode automatique
    }
  }
  else if (!ModeAuto) // ****************************************************************************************************** // Si le mode automatique est désactivé
  {
    if (!AffichageModeManuel) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si l'indicateur d'affichage du mode manuel sur l'écran OLED est désactivé
    {
      u8x8.drawString(0, 7, "- MODE: MANUEL -");                                                                                // Positionne et Affiche le texte
      AffichageModeAuto = false;                                                                                                // Désactive l'indicateur d'affichage du mode auto sur l'écran OLED
      AffichageModeManuel = true;                                                                                               // Active l'indicateur d'affichage du mode manuel sur l'écran OLED
    }
  }

//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 0 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  if (ModeCourant == 0) // **************************************************************************************************** // Si le mode courant "0" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 3;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 25ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED52; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau 52 des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED52 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau 52 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      for (PointeurTableauBroches12LED = NombreLED - 1; PointeurTableauBroches12LED >= 0; PointeurTableauBroches12LED--) // --- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      for (PointeurTableauBroches12LED = NombreLED - 1; PointeurTableauBroches12LED >= 0; PointeurTableauBroches12LED--) // --- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(int(DureeHIGH_LOW * 4));                                                                           // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED52; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau 52 des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED52 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau 52 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // -- // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
      {
                                                                                                                                // Inverse l'ordre de la ligne courante du tableau buffer et mémorise dans le tableau "bufferInverse_TableauSequencesLED"
        bufferInverse_TableauSequencesLED[12 - pt_buffer_TableauSequencesLED - 1] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      
      memcpy(buffer_TableauSequencesLED, bufferInverse_TableauSequencesLED, NombreLED);                                         // Extrait la ligne courante inversée du tableau "bufferInverse_TableauSequencesLED" et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      for (PointeurTableauBroches12LED = NombreLED - 1; PointeurTableauBroches12LED >= 0; PointeurTableauBroches12LED--) // --- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], !(buffer_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]));
      }
      
      Fonction_Temporisation(int(DureeHIGH_LOW * 4));                                                                           // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      for (PointeurTableauBroches12LED = NombreLED - 1; PointeurTableauBroches12LED >= 0; PointeurTableauBroches12LED--) // --- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED52; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau 52 des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED52 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau 52 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      for (pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < NombreLED; pt_buffer_TableauSequencesLED++) // -- // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
      {
                                                                                                                                // Inverse l'ordre de la ligne courante du tableau buffer et mémorise dans le tableau "bufferInverse_TableauSequencesLED"
        bufferInverse_TableauSequencesLED[12 - pt_buffer_TableauSequencesLED - 1] = buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED];
      }
      
      memcpy(buffer_TableauSequencesLED, bufferInverse_TableauSequencesLED, NombreLED);                                         // Extrait la ligne courante inversée du tableau "bufferInverse_TableauSequencesLED" et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      for (PointeurTableauBroches12LED = NombreLED - 1; PointeurTableauBroches12LED >= 0; PointeurTableauBroches12LED--) // --- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      for (PointeurTableauBroches12LED = NombreLED - 1; PointeurTableauBroches12LED >= 0; PointeurTableauBroches12LED--) // --- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], !(buffer_TableauSequencesLED[PointeurTableauBroches12LED]));
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED52; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau 52 des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED52 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau 52 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[PointeurTableauBroches12LED]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "12 - PointeurTableauBroches12LED - 1"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED52; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau 52 des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED52 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau 52 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], buffer_TableauSequencesLED[12 - PointeurTableauBroches12LED - 1]);
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
    
    for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED52; SequenceCouranteLED++) // +++++++++++++++++++++++ // Parcourt les séquences du tableau 52 des séquences d'affichage des LED
    {
      memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED52 + (NombreLED * SequenceCouranteLED), NombreLED);               // Extrait la ligne courante du tableau 52 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
      
      for (PointeurTableauBroches12LED = 0; PointeurTableauBroches12LED < NombreLED; PointeurTableauBroches12LED++) // -------- // Parcourt le tableau des broches des 12 LED
      {
                                                                                                                                // Allume ou éteint la LED courante de rang "PointeurTableauBroches12LED"
        digitalWrite(TableauBroches12LED[PointeurTableauBroches12LED], (buffer_TableauSequencesLED[PointeurTableauBroches12LED]));
      }
      
      Fonction_Temporisation(DureeHIGH_LOW);                                                                                    // Appelle la fonction de temporisation
      if (SortieModeCourant) // ----------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
      {
        SortieModeCourant = false;                                                                                              // Réinitialise l'indicateur de sortie du mode courant
        return;                                                                                                                 // Retour début loop()
      }
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 1 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 1) // *********************************************************************************************** // Si le mode courant "1" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED51; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 51 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED51 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 51 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = PORTD_TEMP;                                                                                                   // Transfère le PORTD temporaire vers le PORTD
          PORTB = ~PORTD_TEMP >> 2;                                                                                             // Transfère le PORTD temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = ~PORTB_TEMP << 2;                                                                                             // Transfère le PORTB temporaire vers le PORTD
          PORTB = PORTB_TEMP;                                                                                                   // Transfère le PORTB temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
      }
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 2 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 2) // *********************************************************************************************** // Si le mode courant "2" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED50; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 50 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED50 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 50 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = ~PORTB_TEMP << 2;                                                                                             // Transfère le PORTB temporaire vers le PORTD
          PORTB = ~PORTB_TEMP;                                                                                                  // Transfère le PORTB temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = PORTD_TEMP;                                                                                                   // Transfère le PORTD temporaire vers le PORTD
          PORTB = PORTD_TEMP >> 2;                                                                                              // Transfère le PORTD temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
      }
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 3 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 3) // *********************************************************************************************** // Si le mode courant "3" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED49; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 49 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED49 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 49 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = PORTD_TEMP;                                                                                                   // Transfère le PORTD temporaire vers le PORTD
          PORTB = ~PORTD_TEMP >> 2;                                                                                             // Transfère le PORTD temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = ~PORTB_TEMP << 2;                                                                                             // Transfère le PORTB temporaire vers le PORTD
          PORTB = PORTB_TEMP;                                                                                                   // Transfère le PORTB temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
      }
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 4 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 4) // *********************************************************************************************** // Si le mode courant "4" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED48; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 48 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED48 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 48 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = PORTD_TEMP;                                                                                                   // Transfère le PORTD temporaire vers le PORTD
          PORTB = ~PORTD_TEMP >> 2;                                                                                             // Transfère le PORTD temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = ~PORTB_TEMP << 2;                                                                                             // Transfère le PORTB temporaire vers le PORTD
          PORTB = PORTB_TEMP;                                                                                                   // Transfère le PORTB temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
      }
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 5 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 5) // *********************************************************************************************** // Si le mode courant "5" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED47; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 47 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED47 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 47 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = ~PORTB_TEMP << 2;                                                                                             // Transfère le PORTB temporaire vers le PORTD
          PORTB = PORTB_TEMP;                                                                                                   // Transfère le PORTB temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = PORTD_TEMP;                                                                                                   // Transfère le PORTD temporaire vers le PORTD
          PORTB = PORTD_TEMP >> 2;                                                                                              // Transfère le PORTD temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
      }
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 6 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 6) // *********************************************************************************************** // Si le mode courant "6" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED46; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 46 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED46 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 46 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = ~PORTB_TEMP << 2;                                                                                             // Transfère le PORTB temporaire vers le PORTD
          PORTB = PORTB_TEMP;                                                                                                   // Transfère le PORTB temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = PORTD_TEMP;                                                                                                   // Transfère le PORTD temporaire vers le PORTD
          PORTB = PORTD_TEMP >> 2;                                                                                              // Transfère le PORTD temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
      }
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 7 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 7) // *********************************************************************************************** // Si le mode courant "7" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED45; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 45 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED45 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 45 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = ~PORTB_TEMP << 2;                                                                                             // Transfère le PORTB temporaire vers le PORTD
          PORTB = PORTB_TEMP;                                                                                                   // Transfère le PORTB temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = PORTD_TEMP;                                                                                                   // Transfère le PORTD temporaire vers le PORTD
          PORTB = ~PORTD_TEMP >> 2;                                                                                             // Transfère le PORTD temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
      }
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 8 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 8) // *********************************************************************************************** // Si le mode courant "8" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED44; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 44 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED44 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 44 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = ~PORTB_TEMP << 2;                                                                                             // Transfère le PORTB temporaire vers le PORTD
          PORTB = PORTB_TEMP;                                                                                                   // Transfère le PORTB temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = PORTD_TEMP;                                                                                                   // Transfère le PORTD temporaire vers le PORTD
          PORTB = ~PORTD_TEMP >> 2;                                                                                             // Transfère le PORTD temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
      }
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 9 *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 9) // *********************************************************************************************** // Si le mode courant "9" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED43; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 43 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED43 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 43 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 10 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 10) // ********************************************************************************************** // Si le mode courant "10" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED42; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 42 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED42 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 42 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 11 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 11) // ********************************************************************************************** // Si le mode courant "11" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED41; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 41 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED41 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 41 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 12 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 12) // ********************************************************************************************** // Si le mode courant "12" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED40; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 40 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED40 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 40 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 13 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 13) // ********************************************************************************************** // Si le mode courant "13" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED39; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 39 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED39 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 39 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 14 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 14) // ********************************************************************************************** // Si le mode courant "14" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED38; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 38 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED38 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 38 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 15 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 15) // ********************************************************************************************** // Si le mode courant "15" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED31; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 31 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED31 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 31 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 16 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 16) // ********************************************************************************************** // Si le mode courant "16" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED30; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 30 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED30 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 30 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 17 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 17) // ********************************************************************************************** // Si le mode courant "17" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED26; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 26 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED26 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 26 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 18 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 18) // ********************************************************************************************** // Si le mode courant "18" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED25; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 25 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED25 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 25 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 19 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 19) // ********************************************************************************************** // Si le mode courant "19" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED23; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 23 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED23 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 23 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          else if (Inverseur)                                                                                                   // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED19 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 19 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          PORTD = ~PORTB_TEMP << 2;                                                                                             // Transfère le PORTB temporaire vers le PORTD
          PORTB = ~PORTB_TEMP;                                                                                                  // Transfère le PORTB temporaire vers le PORTB
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 20 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 20) // ********************************************************************************************** // Si le mode courant "20" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED17; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 17 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED17 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 17 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          else if (Inverseur)                                                                                                   // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED12 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 12 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          else if (!Inverseur)                                                                                                  // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }
//**************************************************************************************************************************************************************************
//*** Animation 12 LED séquencée 21 ****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
  else if (ModeCourant == 21) // ********************************************************************************************** // Si le mode courant "21" est sélectionné
  {
    if (DernierModeCourant != ModeCourant) // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode courant a changé
    {
      //Serial.print(F("ModeCourant = ")); Serial.println(ModeCourant); // Débug
      SortieModeCourant = false;                                                                                                // Réinitialise l'indicateur de sortie du mode courant
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Définit le multiple du nombre d'affichages du mode courant en mode automatique
      Buzzer(3, 0, 1);                                                                                                          // Active le buzzer 3ms
      FonctionAffichageOLED();                                                                                                  // Appelle la fonction de gestion de l'affichage sur l'écran OLED 1.3"
      PointeurTableauBroches12LED = 0;                                                                                          // Initialise le pointeur du tableau des broches 12 LED
      SequenceCouranteLED = 0;                                                                                                  // Initialise la séquence courante des LED affichées
      DureeHIGH_LOW = 50ul; // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> // Définit la temporisation de la LED activée ou désactivée
      
      DernierModeCourant = ModeCourant;                                                                                         // Mémorise le dernier mode courant
    }
    
    static bool Inverseur = true;                                                                                               // Déclare et définit l'inverseur d'égalité des PORTS
    
    for (int EQ_Paire = 0; EQ_Paire <= 14; EQ_Paire += 2) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Parcourt les équations paires
    { 
      for (int EQ_Impaire = 1; EQ_Impaire <= 15; EQ_Impaire += 2) // ---------------------------------------------------------- // Parcourt les équations impaires
      {
        for (SequenceCouranteLED = 0; SequenceCouranteLED < NombreSequencesLED11; SequenceCouranteLED++) // ................... // Parcourt les séquences du tableau 11 des séquences d'affichage des LED
        {
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED11 + (NombreLED * SequenceCouranteLED), NombreLED);           // Extrait la ligne courante du tableau 11 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, false);                                         // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (!Inverseur)                                                                                                       // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          else if (Inverseur)                                                                                                   // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
          
          memcpy_P(buffer_TableauSequencesLED, TableauSequencesLED9 + (NombreLED * SequenceCouranteLED), NombreLED);            // Extrait la ligne courante du tableau 9 des séquences d'affichage des LED et mémorise dans le tableau "buffer_TableauSequencesLED"
          
          Fonction_buffer_TableauSequencesLED_PORTS_D_B_1(EQ_Paire, EQ_Impaire, true);                                          // Appelle la fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B (Arguments : Equation Paire, Equation Impaire, Inversion du test des bits)
          
          if (Inverseur)                                                                                                        // Si l'inverseur d'égalité des PORTS est vrai
          {
            PORTD = PORTD_TEMP;                                                                                                 // Transfère le PORTD temporaire vers le PORTD
            PORTB = ~PORTD_TEMP >> 2;                                                                                           // Transfère le PORTD temporaire vers le PORTB
          }
          else if (!Inverseur)                                                                                                  // Si l'inverseur d'égalité des PORTS est faux
          {
            PORTD = ~PORTB_TEMP << 2;                                                                                           // Transfère le PORTB temporaire vers le PORTD
            PORTB = PORTB_TEMP;                                                                                                 // Transfère le PORTB temporaire vers le PORTB
          }
          
          Fonction_Temporisation(DureeHIGH_LOW);                                                                                // Appelle la fonction de temporisation
          if (SortieModeCourant)                                                                                                // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
          {
            SortieModeCourant = false;                                                                                          // Réinitialise l'indicateur de sortie du mode courant
            return;                                                                                                             // Retour début loop()
          }
        }
        
        Inverseur = !Inverseur;                                                                                                 // Inverse l'inverseur d'égalité des PORTS
      }
      
      Inverseur = !Inverseur;                                                                                                   // Inverse l'inverseur d'égalité des PORTS
    }
  }

//**************************************************************************************************************************************************************************
//**************************************************************************************************************************************************************************
}

//**************************************************************************************************************************************************************************
//*** Fonction d'interruption de changement de broche du bouton poussoir "BPModePlus" **************************************************************************************
//**************************************************************************************************************************************************************************
void InterruptionBPModePlus (void)
{
  static unsigned long DateDernierChangement = 0;                                                                               // Déclare et Initialise la date du dernier changement du bouton poussoir "BPModePlus"
  
  unsigned long DateCourante = millis();                                                                                        // Déclare et Mémorise la date courante
  
  if ((DateCourante - DateDernierChangement) > DureeAntiRebond) // ************************************************************ // Si la durée de l'anti-rebonds est écoulée
  {
    cli();                                                                                                                      // Désactive les interruptions
    
    if (ModeAuto) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode automatique est activé
    {
      ModeAuto = false;                                                                                                         // Désactive le mode automatique
      compteurAffichageModeCourant = 0;                                                                                         // Réinitialise le compteur d'affichages du mode courant en mode automatique
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Réinitialise le multiple du nombre d'affichages du mode courant en mode automatique
    }
    
    FonctionReinitialisation();                                                                                                 // Appelle la fonction de réinitialisation
    
    ModeCourant++;                                                                                                              // Incrémente le mode courant
    if (ModeCourant > NombreModesMax) {ModeCourant = 0;} // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Borne le mode courant
    //Serial.println("Int+"); // Débug
    //Serial.println(ModeCourant); // Débug
    
    SortieModeCourant = true;                                                                                                   // Active l'indicateur de sortie du mode courant
    
    DateDernierChangement = DateCourante;                                                                                       // Mémorise la dernière date courante
    
    sei();                                                                                                                      // Active les interruptions
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction d'interruption de changement de broche du bouton poussoir "BPModeMoins" *************************************************************************************
//**************************************************************************************************************************************************************************
void InterruptionBPModeMoins (void)
{cli();
  static unsigned long DateDernierChangement = 0;                                                                               // Déclare et Initialise la date du dernier changement du bouton poussoir "BPModeMoins"
  
  unsigned long DateCourante = millis();                                                                                        // Déclare et Mémorise la date courante
  
  if ((DateCourante - DateDernierChangement) > DureeAntiRebond) // ************************************************************ // Si la durée de l'anti-rebonds est écoulée
  {
    cli();                                                                                                                      // Désactive les interruptions
    
    if (ModeAuto) // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Si le mode automatique est activé
    {
      ModeAuto = false;                                                                                                         // Désactive le mode automatique
      compteurAffichageModeCourant = 0;                                                                                         // Réinitialise le compteur d'affichages du mode courant en mode automatique
      MultipleNombreAffichageModeCourant = 1;                                                                                   // Réinitialise le multiple du nombre d'affichages du mode courant en mode automatique
    }
    
    FonctionReinitialisation();                                                                                                 // Appelle la fonction de réinitialisation
    
    ModeCourant--;                                                                                                              // Décrémente le mode courant
    if (ModeCourant < 0) {ModeCourant = NombreModesMax;} // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ // Borne le mode courant
    //Serial.println("Int-"); // Débug
    //Serial.println(ModeCourant); // Débug
    
    SortieModeCourant = true;                                                                                                   // Active l'indicateur de sortie du mode courant
    
    DateDernierChangement = DateCourante;                                                                                       // Mémorise la dernière date courante
    
    sei();                                                                                                                      // Active les interruptions
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction d'interruption de changement de broche du bouton poussoir "BPModeAuto" *************************************************************************************
//**************************************************************************************************************************************************************************
void InterruptionBPModeAuto ()
{
  static unsigned long DateDernierChangement = 0;                                                                               // Déclare et Initialise la date du dernier changement du bouton poussoir "BPModeMoins"
  
  unsigned long DateCourante = millis();                                                                                        // Déclare et Mémorise la date courante
  
  if ((DateCourante - DateDernierChangement) > DureeAntiRebond) // ************************************************************ // Si la durée de l'anti-rebonds est écoulée
  {
    cli();                                                                                                                      // Désactive les interruptions
    
    FonctionReinitialisation();                                                                                                 // Appelle la fonction de réinitialisation
    
    Buzzer(100, 0, 1);                                                                                                          // Active le buzzer 100ms
    
    ModeAuto = !ModeAuto;                                                                                                       // Active ou désactive le mode automatique
    
    ModeCourant = 0;                                                                                                            // Initialise le mode courant
    DernierModeCourant = -1;                                                                                                    // Initialise le dernier mode courant
    MultipleNombreAffichageModeCourant = 1;                                                                                     // Initialise le multiple du nombre d'affichages du mode courant en mode automatique
    
    SortieModeCourant = true;                                                                                                   // Active l'indicateur de sortie du mode courant
    
    DateDernierChangement = DateCourante;                                                                                       // Mémorise la dernière date courante
    
    sei();                                                                                                                      // Active les interruptions
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction de réinitialisation *****************************************************************************************************************************************
//**************************************************************************************************************************************************************************
void FonctionReinitialisation ()
{
  cli();                                                                                                                        // Désactive les interruptions
  
  DDRD |= 0b11111100;                                                                                                           // Configure les broches PD2, PD3, PD4, PD5, PD7 et PD6 en sorties
  DDRB |= 0b00111111;                                                                                                           // Configure les broches PB0, PB1, PB2, PB3, PB4 et PB5 en sorties
  
  PORTD &= 0b00000011;                                                                                                          // Eteint toutes les LED du PORTD
  PORTB &= 0b11000000;                                                                                                          // Eteint toutes les LED du PORTB
  
  compteurAffichageModeCourant = 0;                                                                                             // Réinitialise le compteur d'affichages du mode courant en mode automatique
  
  sei();                                                                                                                        // Active les interruptions
}

//**************************************************************************************************************************************************************************
//*** Fonction de gestion de l'affichage sur l'écran OLED 1.3" *************************************************************************************************************
//**************************************************************************************************************************************************************************
void FonctionAffichageOLED ()
{
  u8x8.draw2x2String(6, 3, u8x8_u16toa(ModeCourant, 2));                                                                        // Positionne et Affiche le mode courant
}

//**************************************************************************************************************************************************************************
//*** Fonction Gestion Buzzer **********************************************************************************************************************************************
//**************************************************************************************************************************************************************************
void Buzzer (int TempsH, int TempsL, int nb)                                                                                    // TempsH => délai buzzer ON, TempsL => délai buzzer OFF, nb => nombre de bips
{
  for (int x = 1; x <= nb; x++) // ******************************************************************************************** // Boucle le nombre de fois voulu passé par l'argument "int nb"
  {
    digitalWrite(BrocheBuzzer, HIGH);                                                                                           // Active le buzzer
    delay(TempsH);                                                                                                              // Temporisation à l'état haut du buzzer pendant la durée passée par l'argument "int TempsH"
    digitalWrite(BrocheBuzzer, LOW);                                                                                            // Désactive le buzzer
    delay(TempsL);                                                                                                              // Temporisation à l'état bas du buzzer pendant la durée passée par l'argument "int TempsL"
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction de temporisation non bloquante ******************************************************************************************************************************
//**************************************************************************************************************************************************************************
void Fonction_Temporisation (unsigned long Delai_Attente)
{
  unsigned long TimeOut = millis();                                                                                             // Démarre la temporisation
  
  while (millis() - TimeOut <= Delai_Attente) // ****************************************************************************** // Tant que la temporisation n'est pas écoulée
  {
    if (SortieModeCourant) // ------------------------------------------------------------------------------------------------- // Si l'indicateur de sortie du mode courant est activé via une des fonctions d'interruption de changement de broche des boutons poussoirs
    {
      return;                                                                                                                   // Retour début loop()
    }
  }
}

//**************************************************************************************************************************************************************************
//*** Fonction 1 de gestion de la copie du tableau buffer vers les PORTS D et B ********************************************************************************************
//**************************************************************************************************************************************************************************
void Fonction_buffer_TableauSequencesLED_PORTS_D_B_1 (int Equation_Paire, int Equation_Impaire, bool Inversion_Test_Bit)
{
  // Attention Equations dans le mauvais sens
  
  bool Valeur_Test_Bit = 0;                                                                                                     // Déclare et définit la valeur de test du bit courant (0 ou 1)
  
  PORTD_TEMP = 0b00000000;                                                                                                      // Initialise le PORTD temporaire
  PORTB_TEMP = 0b00000000;                                                                                                      // Initialise le PORTB temporaire
  
  if (Inversion_Test_Bit) {Valeur_Test_Bit = !Valeur_Test_Bit;} // ************************************************************ // Inverse la valeur de test du bit courant
  
  if (Equation_Paire == 0) // ************************************************************************************************* // Si l'équation est égale à "0"
  {
    for (int pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < 6; pt_buffer_TableauSequencesLED++) // ++++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTD_TEMP, pt_buffer_TableauSequencesLED + 2);                                                                // Positionne à "0" le PORTD temporaire de rang "pt_buffer_TableauSequencesLED + 2"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTD_TEMP, pt_buffer_TableauSequencesLED + 2);                                                                  // Positionne à "1" le PORTD temporaire de rang "pt_buffer_TableauSequencesLED + 2"
      }
    }
  }
  else if (Equation_Paire == 2) // ******************************************************************************************** // Si l'équation est égale à "2"
  {
    for (int pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < 6; pt_buffer_TableauSequencesLED++) // ++++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "6 - pt_buffer_TableauSequencesLED - 1" est égale à "0" ou à "1"
      {
        bitClear(PORTB_TEMP, 6 - pt_buffer_TableauSequencesLED - 1);                                                            // Positionne à "0" le PORTB temporaire de rang "6 - pt_buffer_TableauSequencesLED - 1"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "6 - pt_buffer_TableauSequencesLED - 1" est égale à "1" ou à "0"
      {
        bitSet(PORTB_TEMP, 6 - pt_buffer_TableauSequencesLED - 1);                                                              // Positionne à "1" le PORTB temporaire de rang "6 - pt_buffer_TableauSequencesLED - 1"
      }
    }
  }
  else if (Equation_Paire == 4) // ******************************************************************************************** // Si l'équation est égale à "4"
  {
    for (int pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < 6; pt_buffer_TableauSequencesLED++) // ++++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTD_TEMP, 6 - pt_buffer_TableauSequencesLED + 1);                                                            // Positionne à "0" le PORTD temporaire de rang "6 - pt_buffer_TableauSequencesLED + 1"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTD_TEMP, 6 - pt_buffer_TableauSequencesLED + 1);                                                              // Positionne à "1" le PORTD temporaire de rang "6 - pt_buffer_TableauSequencesLED + 1"
      }
    }
  }
  else if (Equation_Paire == 6) // ******************************************************************************************** // Si l'équation est égale à "6"
  {
    for (int pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < 6; pt_buffer_TableauSequencesLED++) // ++++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTD_TEMP, pt_buffer_TableauSequencesLED + 2);                                                                // Positionne à "0" le PORTD temporaire de rang "pt_buffer_TableauSequencesLED + 2"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTD_TEMP, pt_buffer_TableauSequencesLED + 2);                                                                  // Positionne à "1" le PORTD temporaire de rang "pt_buffer_TableauSequencesLED + 2"
      }
    }
  }
  else if (Equation_Paire == 8) // ******************************************************************************************** // Si l'équation est égale à "8"
  {
    for (int pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < 6; pt_buffer_TableauSequencesLED++) // ++++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTB_TEMP, pt_buffer_TableauSequencesLED);                                                                    // Positionne à "0" le PORTB temporaire de rang "pt_buffer_TableauSequencesLED + 2"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTB_TEMP, pt_buffer_TableauSequencesLED);                                                                      // Positionne à "1" le PORTB temporaire de rang "pt_buffer_TableauSequencesLED + 2"
      }
    }
  }
  else if (Equation_Paire == 10) // ******************************************************************************************* // Si l'équation est égale à "10"
  {
    for (int pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < 6; pt_buffer_TableauSequencesLED++) // ++++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "6 - pt_buffer_TableauSequencesLED + 1" est égale à "0" ou à "1"
      {
        bitClear(PORTD_TEMP, 6 - pt_buffer_TableauSequencesLED + 1);                                                            // Positionne à "0" le PORTD temporaire de rang "6 - pt_buffer_TableauSequencesLED + 1"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "6 - pt_buffer_TableauSequencesLED + 1" est égale à "1" ou à "0"
      {
        bitSet(PORTD_TEMP, 6 - pt_buffer_TableauSequencesLED + 1);                                                              // Positionne à "1" le PORTD temporaire de rang "6 - pt_buffer_TableauSequencesLED + 1"
      }
    }
  }
  else if (Equation_Paire == 12) // ******************************************************************************************* // Si l'équation est égale à "12"
  {
    for (int pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < 6; pt_buffer_TableauSequencesLED++) // ++++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "6 - pt_buffer_TableauSequencesLED + 1" est égale à "0" ou à "1"
      {
        bitClear(PORTB_TEMP, 6 - pt_buffer_TableauSequencesLED - 1);                                                            // Positionne à "0" le PORTB temporaire de rang "6 - pt_buffer_TableauSequencesLED - 1"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "6 - pt_buffer_TableauSequencesLED + 1" est égale à "1" ou à "0"
      {
        bitSet(PORTB_TEMP, 6 - pt_buffer_TableauSequencesLED - 1);                                                              // Positionne à "1" le PORTB temporaire de rang "6 - pt_buffer_TableauSequencesLED - 1"
      }
    }
  }
  else if (Equation_Paire == 14) // ******************************************************************************************* // Si l'équation est égale à "14"
  {
    for (int pt_buffer_TableauSequencesLED = 0; pt_buffer_TableauSequencesLED < 6; pt_buffer_TableauSequencesLED++) // ++++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "6 - pt_buffer_TableauSequencesLED + 1" est égale à "0" ou à "1"
      {
        bitClear(PORTB_TEMP, pt_buffer_TableauSequencesLED);                                                                    // Positionne à "0" le PORTB temporaire de rang "pt_buffer_TableauSequencesLED"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "6 - pt_buffer_TableauSequencesLED + 1" est égale à "1" ou à "0"
      {
        bitSet(PORTB_TEMP, pt_buffer_TableauSequencesLED);                                                                      // Positionne à "1" le PORTB temporaire de rang "pt_buffer_TableauSequencesLED"
      }
    }
  }

//**************************************************************************************************************************************************************************
  if (Equation_Impaire == 1) // *********************************************************************************************** // Si l'équation est égale à "1"
  {
    for (int pt_buffer_TableauSequencesLED = 6; pt_buffer_TableauSequencesLED < 12; pt_buffer_TableauSequencesLED++) // +++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTB_TEMP, pt_buffer_TableauSequencesLED - 6);                                                                // Positionne à "0" le PORTB temporaire de rang "pt_buffer_TableauSequencesLED - 6"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTB_TEMP, pt_buffer_TableauSequencesLED - 6);                                                                  // Positionne à "1" le PORTB temporaire de rang "pt_buffer_TableauSequencesLED - 6"
      }
    }
  }
  else if (Equation_Impaire == 3) // ****************************************************************************************** // Si l'équation est égale à "3"
  {
    for (int pt_buffer_TableauSequencesLED = 6; pt_buffer_TableauSequencesLED < 12; pt_buffer_TableauSequencesLED++) // +++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTD_TEMP, 6 - pt_buffer_TableauSequencesLED + 7);                                                            // Positionne à "0" le PORTD temporaire de rang "6 - pt_buffer_TableauSequencesLED + 7"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTD_TEMP, 6 - pt_buffer_TableauSequencesLED + 7);                                                              // Positionne à "1" le PORTD temporaire de rang "6 - pt_buffer_TableauSequencesLED + 7"
      }
    }
  }
  else if (Equation_Impaire == 5) // ****************************************************************************************** // Si l'équation est égale à "5"
  {
    for (int pt_buffer_TableauSequencesLED = 6; pt_buffer_TableauSequencesLED < 12; pt_buffer_TableauSequencesLED++) // +++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTB_TEMP, pt_buffer_TableauSequencesLED - 6);                                                                // Positionne à "0" le PORTB temporaire de rang "pt_buffer_TableauSequencesLED - 6"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTB_TEMP, pt_buffer_TableauSequencesLED - 6);                                                                  // Positionne à "1" le PORTB temporaire de rang "pt_buffer_TableauSequencesLED - 6"
      }
    }
  }
  else if (Equation_Impaire == 7) // ****************************************************************************************** // Si l'équation est égale à "7"
  {
    for (int pt_buffer_TableauSequencesLED = 6; pt_buffer_TableauSequencesLED < 12; pt_buffer_TableauSequencesLED++) // +++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTB_TEMP, 6 - pt_buffer_TableauSequencesLED + 5);                                                            // Positionne à "0" le PORTB temporaire de rang "6 - pt_buffer_TableauSequencesLED + 5"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTB_TEMP, 6 - pt_buffer_TableauSequencesLED + 5);                                                              // Positionne à "1" le PORTB temporaire de rang "6 - pt_buffer_TableauSequencesLED + 5"
      }
    }
  }
  else if (Equation_Impaire == 9) // ****************************************************************************************** // Si l'équation est égale à "9"
  {
    for (int pt_buffer_TableauSequencesLED = 6; pt_buffer_TableauSequencesLED < 12; pt_buffer_TableauSequencesLED++) // +++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTD_TEMP, 6 + pt_buffer_TableauSequencesLED - 10);                                                           // Positionne à "0" le PORTD temporaire de rang "6 + pt_buffer_TableauSequencesLED - 10"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTD_TEMP, 6 + pt_buffer_TableauSequencesLED - 10);                                                             // Positionne à "1" le PORTD temporaire de rang "6 + pt_buffer_TableauSequencesLED - 10"
      }
    }
  }
  else if (Equation_Impaire == 11) // ***************************************************************************************** // Si l'équation est égale à "11"
  {
    for (int pt_buffer_TableauSequencesLED = 6; pt_buffer_TableauSequencesLED < 12; pt_buffer_TableauSequencesLED++) // +++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTB_TEMP, 6 - pt_buffer_TableauSequencesLED + 5);                                                            // Positionne à "0" le PORTB temporaire de rang "6 - pt_buffer_TableauSequencesLED + 5"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTB_TEMP, 6 - pt_buffer_TableauSequencesLED + 5);                                                              // Positionne à "1" le PORTB temporaire de rang "6 - pt_buffer_TableauSequencesLED + 5"
      }
    }
  }
  else if (Equation_Impaire == 13) // ***************************************************************************************** // Si l'équation est égale à "13"
  {
    for (int pt_buffer_TableauSequencesLED = 6; pt_buffer_TableauSequencesLED < 12; pt_buffer_TableauSequencesLED++) // +++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTD_TEMP, 6 + pt_buffer_TableauSequencesLED - 10);                                                           // Positionne à "0" le PORTD temporaire de rang "6 + pt_buffer_TableauSequencesLED - 10"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTD_TEMP, 6 + pt_buffer_TableauSequencesLED - 10);                                                             // Positionne à "1" le PORTD temporaire de rang "6 + pt_buffer_TableauSequencesLED - 10"
      }
    }
  }
  else if (Equation_Impaire == 15) // ***************************************************************************************** // Si l'équation est égale à "15"
  {
    for (int pt_buffer_TableauSequencesLED = 6; pt_buffer_TableauSequencesLED < 12; pt_buffer_TableauSequencesLED++) // +++++++ // Parcourt le tableau buffer contenant les lignes des tableaux des séquences d'affichage des LED
    {
      if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == Valeur_Test_Bit) // ------------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "0" ou à "1"
      {
        bitClear(PORTD_TEMP, 6 - pt_buffer_TableauSequencesLED + 7);                                                            // Positionne à "0" le PORTD temporaire de rang "6 - pt_buffer_TableauSequencesLED + 7"
      }
      else if (buffer_TableauSequencesLED[pt_buffer_TableauSequencesLED] == !Valeur_Test_Bit) // ------------------------------ // Si l'adresse de rang "pt_buffer_TableauSequencesLED" est égale à "1" ou à "0"
      {
        bitSet(PORTD_TEMP, 6 - pt_buffer_TableauSequencesLED + 7);                                                              // Positionne à "1" le PORTD temporaire de rang "6 - pt_buffer_TableauSequencesLED + 7"
      }
    }
  }
}
